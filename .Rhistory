## Religion
wrp <- read_excel(here("data", "data_raw", "country_level", "wrp.xlsx"))
## Qog - econ development and democracy
qog <- read_csv(
here("data", "data_raw", "country_level", "qog_std_ts_jan24.csv"),
guess_max = 15564
)
## ATOP
atop <- read_csv(here("data", "data_raw", "country_level", "atop5_1dy.csv"),
guess_max = 136648)
## Trade
trade <- read_xlsx(here("data", "data_raw", "country_level", "trade.xlsx"),
sheet = 2)
## Handcoded
hc <- read_xlsx(here("data", "data_raw", "country_level", "handcoded.xlsx"),
na = "NA") |>
mutate(countrycode_n = as.numeric(countrycode_n)) |>
drop_na(countrycode_c, countrycode_n) |>
distinct(countrycode_c, countrycode_n, .keep_all = T)
## Distance
geodist <- read_xls(here("data", "data_raw", "country_level",
"dist_cepii.xls"), na = ".")
## official election results
### 98% of processed ballots
# off_res <- read_tsv("data/results-uik-20240318T1503UTC.tsv")
### Final data dumo (100 processed ballots)
off_res <- read_tsv(here("data", "data_raw", "official_results",
"results-uik-20240320T0352UTC.tsv"))
## Supplementary data
### Voting station to country dictionary
uik_dict <- read_excel(here("data", "data_raw", "official_results",
"uik_dictionary.xlsx"), sheet = 2)
countrynameru_dict <- read_excel(here("data", "data_raw",
"official_results",
"uik_dictionary.xlsx"),
sheet = 3)
#-------------------------------------------------------------------------------
# Data cleaning: exit poll
## Data cleaning: new ep
ep_cn <- ep |>
fill(country, .direction = "down") |>
separate(col = "country", into = c("countryname_ru", "countryname_en"),
sep = " / ") |>
separate(col = "city", into = c("city_ru", "city_en"),
sep = " / ") |>
mutate(countryname_en = if_else(countryname_en == "Czech",
"Czechia", countryname_en),
countrycode_n = countrycode(countryname_en,
origin = "country.name",
destination = "iso3n"),
countrycode_c = countrycode(countrycode_n,
origin = "iso3n",
destination = "iso3c"),
voting_station = as.character(voting_station),
city_en = if_else(str_detect(city_ru, "№") == T,
paste(city_en, str_sub(city_ru, -1,
nchar(city_ru))),
city_en),
voters_counted = as.numeric(
str_replace(str_replace(voters_counted, "~", ""), ">", ""))) |>
select(-countryname_en, -countryname_ru)
#------------------------------------------------------------------------------#
# Data cleaning: exit poll raw
## Aggregate to voting station level
ep.raw_agg <- ep_raw_clean |>
group_by(voting_station, countryname_en, countryname_ru, countrycode_c,
countrycode_n, city_ru, city_en) |>
summarise(vote.raw_putin = sum(vote == "Putin")/n(),
vote.raw_davankov = sum(vote == "Davankov")/n(),
vote.raw_spoiled = sum(vote == "Spoiled ballot")/n(),
share.raw_female = sum(sex == "Female", na.rm = T)/n(),
share.raw_othergender = sum(sex == "Other", na.rm = T)/n(),
share.raw_age1824 = sum(age_bin == "18-24", na.rm = T)/n(),
share.raw_age2444 = sum(age_bin == "24-44", na.rm = T)/n(),
share.raw_age4564 = sum(age_bin == "45-64", na.rm = T)/n(),
share.raw_age65 = sum(age_bin == "65+", na.rm = T)/n(),
share.raw_tourist =
sum(out_of_Russia_time == "Tourist (lives in Russia)",
na.rm = T)/n(),
share.raw_afterfeb =
sum(out_of_Russia_time %in% c("6 month - 2 years",
"< 6 months",
"< 2 years"), na.rm = T)/n(),
share.raw_before2014 =
sum(out_of_Russia_time == "> 10 years", na.rm = T)/n(),
share.raw_after2014 =
sum(out_of_Russia_time == "> 5 years", na.rm = T)/n(),
share.raw_2019 =
sum(out_of_Russia_time == "2 - 5 years", na.rm = T)/n(),
# ref 2014
share.raw_afterfebref =
sum(out_of_Russia_time %in% c("6 month - 2 years",
"< 6 months",
"< 2 years"), na.rm = T)
/sum(out_of_Russia_time == "> 10 years", na.rm = T),
share.raw_after2014ref =
sum(out_of_Russia_time == "> 5 years", na.rm = T)
/sum(out_of_Russia_time == "> 10 years", na.rm = T),
share.raw_2019ref =
sum(out_of_Russia_time == "2 - 5 years", na.rm = T)
/sum(out_of_Russia_time == "> 10 years", na.rm = T),
share.raw_timemore4h =
sum(time_to_vs == "> 4 hours (staying for the night)",
na.rm = T)/n(),
share.raw_local =
sum(time_to_vs %in% c("<30 minutes", "30 minutes - 1 hour"),
na.rm = T)/n(),
share.raw_trustanyyes =
sum(result_trust %in% c("Definitely yes", "Probably yes"),
na.rm = T)/n(),
share.raw_trustanyno =
sum(result_trust %in% c("Definitely no", "Probably no"),
na.rm = T)/n()) |>
ungroup() |>
select(-countryname_ru, -countryname_en, -city_ru, -city_en)
#------------------------------------------------------------------------------#
# Data cleaning: uik dictionary
## Convert countrynames in Russian provided by the Russian Ministry of Foreign
## Affairs to match with those int the international code dictionary
uik_dict_clean <- uik_dict |>
mutate(uik = as.character(uik), # For merges
country_compatible = case_when(
country == "Южно-Африканская Республика и Лесото" ~ "Южная Африка",
country == "Шри-Ланка и Мальдивы" ~ "Шри-Ланка",
country == "Центральноафриканская Республика (ЦАР)"
~ "Центральноафриканская Республика",
country == "Филиппины и Палау" ~ "Филиппины",
country == "Федеративная Республика Германия" ~ "Германия",
country == "Уганда и Южный Судан" ~ "Уганда",
country == "Танзания" ~ "Объединенная Республика Танзания",
country == "Сирия" ~ "Сирийская Арабская Республика",
country == "Сенегал и Гамбия" ~ "Сенегал",
country == "Республика Конго" ~ "Конго",
country == "Палестина" ~ "Государство Палестина",
country == "Новая Зеландия, Тонга и Самоа" ~ "Новая Зеландия",
country == "Никарагуа, Гондурас и Сальвадор" ~ "Никарагуа",
country == "Нидерланды" ~ "Нидерланды (Королевство)",
country == "Молдавия" ~ "Республика Молдова",
country == "Мозамбик и Эсватини" ~ "Мозамбик",
country == "Мексика и Белиз" ~ "Мексика",
country == "Мали и Нигер" ~ "Мали",
country == "Мадагаскар и Коморские Острова" ~ "Мадагаскар",
country == "Лаос" ~ "Лаосская Народно-Демократическая Республика",
country == "Кот-д’Ивуар и" ~ "Кот-д'Ивуар",
country == "КНР" ~ "Китай",
country == "Киргизия" ~ "Кыргызстан",
country == "Камерун и Экваториальная Гвинея" ~ "Камерун",
country == "Иран" ~ "Иран (Исламская Республика)",
country == "Индонезия и Восточный Тимор" ~ "Индонезия",
country == "Зимбабве и Малави" ~ "Зимбабве",
country == "Джибути и Сомали" ~ "Джибути",
country == "Гвинея и Сьерра-Леоне" ~ "Гвинея",
country == "Гана и Либерия" ~ "Гана",
country == "Венесуэла, Доминиканская Республика и Гаити"
~ "Венесуэла (Боливарианская Республика)",
country == "Великобритания"
~ "Соединенное Королевство Великобритании и Северной Ирландии",
country == "Бруней" ~ "Бруней-Даруссалам",
country == "Бразилия и Суринам" ~ "Бразилия",
country == "Боливия" ~ "Боливия (Многонациональное Государство)",
country == "Бенин и Того" ~ "Бенин",
country == "Белоруссия" ~ "Беларусь",
country == "Ангола и Сан-Томе и Принсипи" ~ "Ангола",
country == "КНДР" ~ "Корейская Народно-Демократическая Республика",
.default = country)) |>
left_join(countrynameru_dict,
by = join_by("country_compatible" == "Country or Area"))
#------------------------------------------------------------------------------#
# Data cleaning: official results
## Select international voting stations
off_res_select <- off_res |>
separate(col = "uik", into = c(NA, "uik_num"), sep = "№") |>
filter(nchar(uik_num) == 4 & substring(uik_num, 1, 1) == "8") |>
left_join(select(ep_cn, countryname_en, countryname_ru, countrycode_c,
countrycode_n, city_ru, city_en, voting_station),
by = join_by("uik_num" == "voting_station")) |>
left_join(uik_dict_clean, by = join_by("uik_num" == "uik")) |>
mutate(countryname_ru = if_else(is.na(countryname_ru),
country_compatible, countryname_ru),
city_en = if_else(is.na(city_en), settlement, city_en),
countrycode_c = if_else(
tik == "Город Байконур (Республика Казахстан)",
"KAZ", countrycode_c),
countryname_ru = if_else(
tik == "Город Байконур (Республика Казахстан)",
"Казахстан", countryname_ru),
city_en = if_else(tik == "Город Байконур (Республика Казахстан)",
"Baikonur", city_en),
city_ru = if_else(tik == "Город Байконур (Республика Казахстан)",
"Байконур", city_ru),
countrycode_c = if_else(is.na(countrycode_c), `ISO-alpha3 code`,
countrycode_c),
countrycode_n = if_else(is.na(countrycode_n),
countrycode(sourcevar = countrycode_c,
origin = "iso3c",
destination = "iso3n"),
countrycode_n),
countryname_en = if_else(is.na(countryname_en),
countrycode(sourcevar = countrycode_n,
origin = "iso3n",
destination = "country.name"),
countryname_en)) |>
select(voting_station = uik_num, city_ru, city_en,
countryname_ru, countryname_en, countrycode_c, countrycode_n,
voters_in_list = `Число избирателей, включенных в список избирателей`,
ballots_received = `Число избирательных бюллетеней, полученных участковой избирательной комиссией`,
early_ballots = `Число избирательных бюллетеней, выданных избирателям, проголосовавшим досрочно`,
ballots_voting_space = `Число избирательных бюллетеней, выданных в помещении для голосования в день голосования`,
ballots_out_of_voting_space = `Число избирательных бюллетеней, выданных вне помещения для голосования в день голосования`,
ballots_destroyed = `Число погашенных избирательных бюллетеней`,
ballots_in_movable_boxes = `Число избирательных бюллетеней в переносных ящиках для голосования`,
ballots_in_stationary_boxes = `Число бюллетеней в стационарных ящиках для голосования`,
ballots_invalid = `Число недействительных избирательных бюллетеней`,
ballots_valid = `Число действительных избирательных бюллетеней`,
ballots_lost = `Число утраченных избирательных бюллетеней`,
ballots_uncounted = `Число избирательных бюллетеней, не учтенных при получении`,
davankov.abs_full = `Даванков Владислав Андреевич`,
davankov_full = `Даванков Владислав Андреевич (%)`,
putin.abs_full = `Путин Владимир Владимирович`,
putin_full = `Путин Владимир Владимирович (%)`,
slutsky.abs_full = `Слуцкий Леонид Эдуардович`,
slutsky_full = `Слуцкий Леонид Эдуардович (%)` ,
haritonov.abs_full = `Харитонов Николай Михайлович`,
haritonov_full = `Харитонов Николай Михайлович (%)`) |>
mutate(across(c("putin_full", "davankov_full",
"slutsky_full", "haritonov_full"),
~ ./100),
spoiled_full = ballots_invalid/(early_ballots + ballots_voting_space
+ ballots_out_of_voting_space
+ ballots_lost + ballots_uncounted),
countryname_en = case_when(countryname_en == "USA" ~ "United States",
countryname_en == "UAE" ~ "United Arab Emirates",
.default = countryname_en),
countryname_ru = case_when(countryname_en == "США" ~ "Соединенные Штаты Америки",
countryname_en == "ОАЭ" ~ "Объединенные Арабские Эмираты",
.default = countryname_ru))
## Select international voting stations
off_res_select <- off_res |>
separate(col = "uik", into = c(NA, "uik_num"), sep = "№") |>
filter(nchar(uik_num) == 4 & substring(uik_num, 1, 1) == "8") |>
left_join(select(ep_cn, countryname_en, countryname_ru, countrycode_c,
countrycode_n, city_ru, city_en, voting_station),
by = join_by("uik_num" == "voting_station")) |>
left_join(uik_dict_clean, by = join_by("uik_num" == "uik")) |>
mutate(countryname_ru = if_else(is.na(countryname_ru),
country_compatible, countryname_ru),
city_en = if_else(is.na(city_en), settlement, city_en),
countrycode_c = if_else(
tik == "Город Байконур (Республика Казахстан)",
"KAZ", countrycode_c),
countryname_ru = if_else(
tik == "Город Байконур (Республика Казахстан)",
"Казахстан", countryname_ru),
city_en = if_else(tik == "Город Байконур (Республика Казахстан)",
"Baikonur", city_en),
city_ru = if_else(tik == "Город Байконур (Республика Казахстан)",
"Байконур", city_ru),
countrycode_c = if_else(is.na(countrycode_c), `ISO-alpha3 code`,
countrycode_c),
countrycode_n = if_else(is.na(countrycode_n),
countrycode(sourcevar = countrycode_c,
origin = "iso3c",
destination = "iso3n"),
countrycode_n),
countryname_en = if_else(is.na(countryname_en),
countrycode(sourcevar = countrycode_n,
origin = "iso3n",
destination = "country.name"),
countryname_en)) |>
select(voting_station = uik_num, city_ru, city_en,
countryname_ru, countryname_en, countrycode_c, countrycode_n,
voters_in_list = `Число избирателей, включенных в список избирателей`,
ballots_received = `Число избирательных бюллетеней, полученных участковой избирательной комиссией`,
early_ballots = `Число избирательных бюллетеней, выданных избирателям, проголосовавшим досрочно`,
ballots_voting_space = `Число избирательных бюллетеней, выданных в помещении для голосования в день голосования`,
ballots_out_of_voting_space = `Число избирательных бюллетеней, выданных вне помещения для голосования в день голосования`,
ballots_destroyed = `Число погашенных избирательных бюллетеней`,
ballots_in_movable_boxes = `Число избирательных бюллетеней в переносных ящиках для голосования`,
ballots_in_stationary_boxes = `Число бюллетеней в стационарных ящиках для голосования`,
ballots_invalid = `Число недействительных избирательных бюллетеней`,
ballots_valid = `Число действительных избирательных бюллетеней`,
ballots_lost = `Число утраченных избирательных бюллетеней`,
ballots_uncounted = `Число избирательных бюллетеней, не учтенных при получении`,
davankov.abs_full = `Даванков Владислав Андреевич`,
davankov_full = `Даванков Владислав Андреевич (%)`,
putin.abs_full = `Путин Владимир Владимирович`,
putin_full = `Путин Владимир Владимирович (%)`,
slutsky.abs_full = `Слуцкий Леонид Эдуардович`,
slutsky_full = `Слуцкий Леонид Эдуардович (%)` ,
haritonov.abs_full = `Харитонов Николай Михайлович`,
haritonov_full = `Харитонов Николай Михайлович (%)`) |>
mutate(across(c("putin_full", "davankov_full",
"slutsky_full", "haritonov_full"),
~ ./100),
spoiled_full = ballots_invalid/(early_ballots + ballots_voting_space
+ ballots_out_of_voting_space
+ ballots_lost + ballots_uncounted),
countryname_en = case_when(countryname_en == "USA" ~ "United States",
countryname_en == "UAE" ~ "United Arab Emirates",
.default = countryname_en),
countryname_ru = case_when(countryname_en == "США" ~ "Соединенные Штаты Америки",
countryname_en == "ОАЭ" ~ "Объединенные Арабские Эмираты",
.default = countryname_ru))
off_res_select <- off_res |>
separate(col = "uik", into = c(NA, "uik_num"), sep = "№") |>
filter(nchar(uik_num) == 4 & substring(uik_num, 1, 1) == "8") |>
left_join(select(ep_cn, countryname_en, countryname_ru, countrycode_c,
countrycode_n, city_ru, city_en, voting_station),
by = join_by("uik_num" == "voting_station")) |>
left_join(uik_dict_clean, by = join_by("uik_num" == "uik")) |>
mutate(countryname_ru = if_else(is.na(countryname_ru),
country_compatible, countryname_ru),
city_en = if_else(is.na(city_en), settlement, city_en),
countrycode_c = if_else(
tik == "Город Байконур (Республика Казахстан)",
"KAZ", countrycode_c),
countryname_ru = if_else(
tik == "Город Байконур (Республика Казахстан)",
"Казахстан", countryname_ru),
city_en = if_else(tik == "Город Байконур (Республика Казахстан)",
"Baikonur", city_en),
city_ru = if_else(tik == "Город Байконур (Республика Казахстан)",
"Байконур", city_ru),
countrycode_c = if_else(is.na(countrycode_c), `ISO-alpha3 code`,
countrycode_c),
countrycode_n = if_else(is.na(countrycode_n),
countrycode(sourcevar = countrycode_c,
origin = "iso3c",
destination = "iso3n"),
countrycode_n),
countryname_en = if_else(is.na(countryname_en),
countrycode(sourcevar = countrycode_n,
origin = "iso3n",
destination = "country.name"),
countryname_en)) |>
select(voting_station = uik_num, city_ru, city_en,
countryname_ru, countryname_en, countrycode_c, countrycode_n,
voters_in_list = `Число избирателей, включенных в список избирателей`,
ballots_received = `Число избирательных бюллетеней, полученных участковой избирательной комиссией`,
early_ballots = `Число избирательных бюллетеней, выданных избирателям, проголосовавшим досрочно`,
ballots_voting_space = `Число избирательных бюллетеней, выданных в помещении для голосования в день голосования`,
ballots_out_of_voting_space = `Число избирательных бюллетеней, выданных вне помещения для голосования в день голосования`,
ballots_destroyed = `Число погашенных избирательных бюллетеней`,
ballots_in_movable_boxes = `Число избирательных бюллетеней в переносных ящиках для голосования`,
ballots_in_stationary_boxes = `Число бюллетеней в стационарных ящиках для голосования`,
ballots_invalid = `Число недействительных избирательных бюллетеней`,
ballots_valid = `Число действительных избирательных бюллетеней`,
ballots_lost = `Число утраченных избирательных бюллетеней`,
ballots_uncounted = `Число избирательных бюллетеней, не учтенных при получении`,
davankov.abs_full = `Даванков Владислав Андреевич`,
davankov_full = `Даванков Владислав Андреевич (%)`,
putin.abs_full = `Путин Владимир Владимирович`,
putin_full = `Путин Владимир Владимирович (%)`,
slutsky.abs_full = `Слуцкий Леонид Эдуардович`,
slutsky_full = `Слуцкий Леонид Эдуардович (%)` ,
haritonov.abs_full = `Харитонов Николай Михайлович`,
haritonov_full = `Харитонов Николай Михайлович (%)`)
## Select international voting stations
off_res_select <- off_res |>
separate(col = "uik", into = c(NA, "uik_num"), sep = "№") |>
filter(nchar(uik_num) == 4 & substring(uik_num, 1, 1) == "8") |>
left_join(select(ep_cn, countryname_en, countryname_ru, countrycode_c,
countrycode_n, city_ru, city_en, voting_station),
by = join_by("uik_num" == "voting_station")) |>
left_join(uik_dict_clean, by = join_by("uik_num" == "uik")) |>
mutate(countryname_ru = if_else(is.na(countryname_ru),
country_compatible, countryname_ru),
city_en = if_else(is.na(city_en), settlement, city_en),
countrycode_c = if_else(
tik == "Город Байконур (Республика Казахстан)",
"KAZ", countrycode_c),
countryname_ru = if_else(
tik == "Город Байконур (Республика Казахстан)",
"Казахстан", countryname_ru),
city_en = if_else(tik == "Город Байконур (Республика Казахстан)",
"Baikonur", city_en),
city_ru = if_else(tik == "Город Байконур (Республика Казахстан)",
"Байконур", city_ru),
countrycode_c = if_else(is.na(countrycode_c), `ISO-alpha3 code`,
countrycode_c),
countrycode_n = if_else(is.na(countrycode_n),
countrycode(sourcevar = countrycode_c,
origin = "iso3c",
destination = "iso3n"),
countrycode_n),
countryname_en = if_else(is.na(countryname_en),
countrycode(sourcevar = countrycode_n,
origin = "iso3n",
destination = "country.name"),
countryname_en)) |>
select(voting_station = uik_num, city_ru, city_en,
countryname_ru, countryname_en, countrycode_c, countrycode_n,
voters_in_list = `Число избирателей, включенных в список избирателей`,
ballots_received = `Число избирательных бюллетеней, полученных участковой избирательной комиссией`,
early_ballots = `Число избирательных бюллетеней, выданных избирателям, проголосовавшим досрочно`,
ballots_voting_space = `Число избирательных бюллетеней, выданных в помещении для голосования в день голосования`,
ballots_out_of_voting_space = `Число избирательных бюллетеней, выданных вне помещения для голосования в день голосования`,
ballots_destroyed = `Число погашенных избирательных бюллетеней`,
ballots_in_movable_boxes = `Число избирательных бюллетеней в переносных ящиках для голосования`,
ballots_in_stationary_boxes = `Число бюллетеней в стационарных ящиках для голосования`,
ballots_invalid = `Число недействительных избирательных бюллетеней`,
ballots_valid = `Число действительных избирательных бюллетеней`,
ballots_lost = `Число утраченных избирательных бюллетеней`,
ballots_uncounted = `Число избирательных бюллетеней, не учтенных при получении`,
davankov.abs_full = `Даванков Владислав Андреевич`,
davankov_full = `Даванков Владислав Андреевич (%)`,
putin.abs_full = `Путин Владимир Владимирович`,
putin_full = `Путин Владимир Владимирович (%)`,
slutsky.abs_full = `Слуцкий Леонид Эдуардович`,
slutsky_full = `Слуцкий Леонид Эдуардович (%)` ,
haritonov.abs_full = `Харитонов Николай Михайлович`,
haritonov_full = `Харитонов Николай Михайлович (%)`) |>
mutate(across(c("putin_full", "davankov_full",
"slutsky_full", "haritonov_full"),
~ ./100),
spoiled_full = ballots_invalid/(early_ballots + ballots_voting_space
+ ballots_out_of_voting_space
+ ballots_lost + ballots_uncounted),
countryname_en = case_when(countryname_en == "USA" ~ "United States",
countryname_en == "UAE" ~ "United Arab Emirates",
.default = countryname_en),
countryname_ru = case_when(countryname_en == "США" ~ "Соединенные Штаты Америки",
countryname_en == "ОАЭ" ~ "Объединенные Арабские Эмираты",
.default = countryname_ru))
off_res_select <- off_res |>
separate(col = "uik", into = c(NA, "uik_num"), sep = "№") |>
filter(nchar(uik_num) == 4 & substring(uik_num, 1, 1) == "8") |>
left_join(select(ep_cn, countryname_en, countryname_ru, countrycode_c,
countrycode_n, city_ru, city_en, voting_station),
by = join_by("uik_num" == "voting_station")) |>
left_join(uik_dict_clean, by = join_by("uik_num" == "uik")) |>
mutate(countryname_ru = if_else(is.na(countryname_ru),
country_compatible, countryname_ru),
city_en = if_else(is.na(city_en), settlement, city_en),
countrycode_c = if_else(
tik == "Город Байконур (Республика Казахстан)",
"KAZ", countrycode_c),
countryname_ru = if_else(
tik == "Город Байконур (Республика Казахстан)",
"Казахстан", countryname_ru),
city_en = if_else(tik == "Город Байконур (Республика Казахстан)",
"Baikonur", city_en),
city_ru = if_else(tik == "Город Байконур (Республика Казахстан)",
"Байконур", city_ru),
countrycode_c = if_else(is.na(countrycode_c), `ISO-alpha3 code`,
countrycode_c),
countrycode_n = if_else(is.na(countrycode_n),
countrycode(sourcevar = countrycode_c,
origin = "iso3c",
destination = "iso3n"),
countrycode_n),
countryname_en = if_else(is.na(countryname_en),
countrycode(sourcevar = countrycode_n,
origin = "iso3n",
destination = "country.name"),
countryname_en))
off_res_select <- off_res |>
separate(col = "uik", into = c(NA, "uik_num"), sep = "№") |>
filter(nchar(uik_num) == 4 & substring(uik_num, 1, 1) == "8") |>
left_join(select(ep_cn, countryname_en, countryname_ru, countrycode_c,
countrycode_n, city_ru, city_en, voting_station),
by = join_by("uik_num" == "voting_station")) |>
left_join(uik_dict_clean, by = join_by("uik_num" == "uik"))
## Data cleaning: new ep
ep_cn <- ep |>
fill(country, .direction = "down") |>
separate(col = "country", into = c("countryname_ru", "countryname_en"),
sep = " / ") |>
separate(col = "city", into = c("city_ru", "city_en"),
sep = " / ") |>
mutate(countryname_en = if_else(countryname_en == "Czech",
"Czechia", countryname_en),
countrycode_n = countrycode(countryname_en,
origin = "country.name",
destination = "iso3n"),
countrycode_c = countrycode(countrycode_n,
origin = "iso3n",
destination = "iso3c"),
voting_station = as.character(voting_station),
city_en = if_else(str_detect(city_ru, "№") == T,
paste(city_en, str_sub(city_ru, -1,
nchar(city_ru))),
city_en),
voters_counted = as.numeric(
str_replace(str_replace(voters_counted, "~", ""), ">", "")))
source("~/GitHub/voting-abroad/scripts/data_building/data_building.R")
#| label: packages
#| cache: false
source(here::here("utilities", "check_packages.R"))
source(here::here("utilities", "functions.R"))
#| label: source data
data_country <- read_rds(here("data", "data_built", "data_country.rds"))
#| label: linear models
#| fig-keep: 2
m1 <- lm(ep ~ vdem_polyarchy_2022 + log(mad_gdppc_2018) + orthodox_share
+ log(dist) + log(voters_in_list) + log(tourist_trips), data = data_country)
View(data_country)
m1 <- lm(ep ~ vdem_polyarchy_2022 + log(mad_gdppc_2018) + orthodox_share
+ log(dist) + log(voters_in_list) + log(mean_trips), data = data_country)
m1.log <- glm(ep ~ vdem_polyarchy_2022 + log(mad_gdppc_2018) + orthodox_share
+ log(dist) + log(voters_in_list),
data = data_country, family = "binomial")
m1.log <- glm(ep ~ vdem_polyarchy_2022 + log(mad_gdppc_2018) + orthodox_share
+ log(dist) + log(voters_in_list)+ log(mean_trips),
data = data_country, family = "binomial")
summary(m1)
summary(m1.log)
check_m1.log <- plot(check_model(m1.log))
check_m1.log[[4]] <- check_m1.log[[4]] + theme(axis.text.x = element_text(
angle = 45,hjust = 1)
)
check_m1.log
